{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"первый_проект","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"yYx9hrkrY3pD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1624400790334,"user_tz":-180,"elapsed":24793,"user":{"displayName":"Глеб Семенов","photoUrl":"","userId":"04626066351708275068"}},"outputId":"242909d1-a82e-447c-f40c-b9a579110bc2"},"source":["import nltk\n","import numpy as np\n","from string import punctuation\n","from nltk.corpus import stopwords\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.decomposition import LatentDirichletAllocation\n","nltk.download('stopwords')\n","from google.colab import drive\n","!pip install pymorphy2\n","import pymorphy2\n","import nltk\n","from nltk.tokenize import word_tokenize, sent_tokenize\n","from nltk.stem.snowball import SnowballStemmer\n","import pandas as pd\n","from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n","drive.mount('/content/drive')\n","nltk.download(\"punkt\")\n","nltk.download(\"wordnet\")\n","FILE=\"/content/drive/Shareddrives/Campus_K5/k5f4_team200/kinopoisk-top250.csv\"\n","# стоп слов не хватало, поэтому пришлось добавить\n","delete = stopwords.words('russian')\n","delete += ['её','которых','той','тот','либо','который','что','он','-','»','«','—','_','~','это','эта','кто','в','эти','их','так','к','как','себе','они','но','ним','оно','так','есть','лишь',',','.',';','и','под','с','до']"],"execution_count":1,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n","Collecting pymorphy2\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/07/57/b2ff2fae3376d4f3c697b9886b64a54b476e1a332c67eee9f88e7f1ae8c9/pymorphy2-0.9.1-py3-none-any.whl (55kB)\n","\u001b[K     |████████████████████████████████| 61kB 4.8MB/s \n","\u001b[?25hCollecting pymorphy2-dicts-ru<3.0,>=2.4\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/3a/79/bea0021eeb7eeefde22ef9e96badf174068a2dd20264b9a378f2be1cdd9e/pymorphy2_dicts_ru-2.4.417127.4579844-py2.py3-none-any.whl (8.2MB)\n","\u001b[K     |████████████████████████████████| 8.2MB 7.5MB/s \n","\u001b[?25hRequirement already satisfied: docopt>=0.6 in /usr/local/lib/python3.7/dist-packages (from pymorphy2) (0.6.2)\n","Collecting dawg-python>=0.7.1\n","  Downloading https://files.pythonhosted.org/packages/6a/84/ff1ce2071d4c650ec85745766c0047ccc3b5036f1d03559fd46bb38b5eeb/DAWG_Python-0.7.2-py2.py3-none-any.whl\n","Installing collected packages: pymorphy2-dicts-ru, dawg-python, pymorphy2\n","Successfully installed dawg-python-0.7.2 pymorphy2-0.9.1 pymorphy2-dicts-ru-2.4.417127.4579844\n","Mounted at /content/drive\n","[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n","[nltk_data] Downloading package wordnet to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/wordnet.zip.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ZsmzuRigZEKQ","executionInfo":{"status":"ok","timestamp":1624400792647,"user_tz":-180,"elapsed":1207,"user":{"displayName":"Глеб Семенов","photoUrl":"","userId":"04626066351708275068"}}},"source":["# удаление лишни столбцов и считывание .csv файла\n","DATA=pd.read_csv(FILE)\n","DATA = DATA.drop([ 'movie', 'year','url_logo'],axis=1)"],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"id":"NklHb4E8nnFW","executionInfo":{"status":"ok","timestamp":1624400964745,"user_tz":-180,"elapsed":399,"user":{"displayName":"Глеб Семенов","photoUrl":"","userId":"04626066351708275068"}}},"source":["new_overview=DATA['actors']+DATA['overview']+DATA['screenwriter']"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"id":"ir0LBh8-k9cg","executionInfo":{"status":"ok","timestamp":1624400966036,"user_tz":-180,"elapsed":398,"user":{"displayName":"Глеб Семенов","photoUrl":"","userId":"04626066351708275068"}}},"source":["# токенизирует столбик с аннотацией\n","def tt(tit, wt):\n","  return word_tokenize(tit)\n","\n","DATA['tikenized_new_overview'] = new_overview.apply(lambda x: tt(x, word_tokenize))\n","DATA['tikenized_new_overview'] = new_overview.apply(word_tokenize)"],"execution_count":11,"outputs":[]},{"cell_type":"code","metadata":{"id":"bFYXCsFQrkVv","executionInfo":{"status":"ok","timestamp":1624400967253,"user_tz":-180,"elapsed":4,"user":{"displayName":"Глеб Семенов","photoUrl":"","userId":"04626066351708275068"}}},"source":["# оставил на случай болле серьезной обработки\n","def stemming(titl, delete):\n","  return [delete.stem(word) for word in titl]"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"oSAj2t5ahQ1h","executionInfo":{"status":"ok","timestamp":1624400968658,"user_tz":-180,"elapsed":3,"user":{"displayName":"Глеб Семенов","photoUrl":"","userId":"04626066351708275068"}}},"source":["# удаление знаков пунктуации\n","# apply-применяет функцию к каждому значению столбца\n","punctuation = list(punctuation)\n","def fp(x):\n","  elements = [element if element not in punctuation else ' ' for element  in x]\n","  return ''.join(elements)\n","DATA['fp'] = new_overview.apply(fp)"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4uxtjUrUirwC","executionInfo":{"status":"ok","timestamp":1624400973999,"user_tz":-180,"elapsed":2904,"user":{"displayName":"Глеб Семенов","photoUrl":"","userId":"04626066351708275068"}},"outputId":"9c370805-15b8-42b3-992c-e869e0eeaf49"},"source":["!pip install pymorphy2\n","import pymorphy2"],"execution_count":14,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: pymorphy2 in /usr/local/lib/python3.7/dist-packages (0.9.1)\n","Requirement already satisfied: dawg-python>=0.7.1 in /usr/local/lib/python3.7/dist-packages (from pymorphy2) (0.7.2)\n","Requirement already satisfied: pymorphy2-dicts-ru<3.0,>=2.4 in /usr/local/lib/python3.7/dist-packages (from pymorphy2) (2.4.417127.4579844)\n","Requirement already satisfied: docopt>=0.6 in /usr/local/lib/python3.7/dist-packages (from pymorphy2) (0.6.2)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ryRXglU4ixJh","executionInfo":{"status":"ok","timestamp":1624401005644,"user_tz":-180,"elapsed":6819,"user":{"displayName":"Глеб Семенов","photoUrl":"","userId":"04626066351708275068"}}},"source":["# лемматизируем токенезированный столбец\n","lem=pymorphy2.MorphAnalyzer()\n","def lemmatize(tt, lem):\n","  return [lem.parse(i)[0].normalized.word for i in tt]\n","DATA['lemmatized_new_overview'] = DATA['tikenized_new_overview'].apply(lambda x: lemmatize(x, lem))"],"execution_count":17,"outputs":[]},{"cell_type":"code","metadata":{"id":"bA1EeDIo-FgC","colab":{"base_uri":"https://localhost:8080/","height":737},"executionInfo":{"status":"error","timestamp":1624400995496,"user_tz":-180,"elapsed":13577,"user":{"displayName":"Глеб Семенов","photoUrl":"","userId":"04626066351708275068"}},"outputId":"28326141-3905-4e87-e151-bb2939b74a0a"},"source":["!pip install pyLDAvis\n","import warnings\n","warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n","from sklearn.decomposition import TruncatedSVD\n","from sklearn.manifold import TSNE\n","import multiprocessing\n","from sklearn.decomposition import LatentDirichletAllocation\n","import gensim\n","import gensim.corpora as corpora\n","from gensim.models import CoherenceModel\n","import pyLDAvis\n","import pyLDAvis.gensim_models as gensimvis\n","import matplotlib.pyplot as plt\n","from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n","from sklearn.cluster import KMeans\n","from PIL import Image\n","from sklearn.manifold import TSNE\n","import multiprocessing\n","from sklearn.decomposition import LatentDirichletAllocation\n","%matplotlib inline"],"execution_count":16,"outputs":[{"output_type":"stream","text":["Collecting pyLDAvis\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/03/a5/15a0da6b0150b8b68610cc78af80364a80a9a4c8b6dd5ee549b8989d4b60/pyLDAvis-3.3.1.tar.gz (1.7MB)\n","\u001b[K     |████████████████████████████████| 1.7MB 7.5MB/s \n","\u001b[?25h  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","  Installing backend dependencies ... \u001b[?25l\u001b[?25hdone\n","    Preparing wheel metadata ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (0.16.0)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (1.0.1)\n","Requirement already satisfied: numexpr in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (2.7.3)\n","Collecting funcy\n","  Downloading https://files.pythonhosted.org/packages/44/52/5cf7401456a461e4b481650dfb8279bc000f31a011d0918904f86e755947/funcy-1.16-py2.py3-none-any.whl\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (from pyLDAvis) (1.4.1)\n","Collecting pandas>=1.2.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/e6/0a/90da8840e044c329a0271fb0244ff40a68a2615bc360c296a3dc5e326ab6/pandas-1.2.5-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.whl (9.9MB)\n","\u001b[K     |████████████████████████████████| 9.9MB 36.1MB/s \n","\u001b[?25hCollecting numpy>=1.20.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/3f/03/c3526fb4e79a793498829ca570f2f868204ad9a8040afcd72d82a8f121db/numpy-1.21.0-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (15.7MB)\n","\u001b[K     |████████████████████████████████| 15.7MB 198kB/s \n","\u001b[31mERROR: Operation cancelled by user\u001b[0m\n","\u001b[?25h"],"name":"stdout"},{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-16-9c037a2350cf>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mgensim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcorpora\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mcorpora\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgensim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodels\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mCoherenceModel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mpyLDAvis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpyLDAvis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgensim_models\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mgensimvis\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'pyLDAvis'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"]}]},{"cell_type":"code","metadata":{"id":"Rnhew2MVFTf3"},"source":["# далее идет обучение с учителем\n","from sklearn.model_selection import train_test_split, StratifiedKFold\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.tree import DecisionTreeRegressor\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_absolute_error\n","y=DATA['rating_ball']\n","x=DATA['lemmatized_new_overview']\n","# объединяет список списков в один список\n","def f_p(x):\n","  elements = [element for element  in x]\n","  return ' '.join(elements)\n","x = x.apply(f_p)\n","# переводим строковой X в векторный вид\n","vectorizer = TfidfVectorizer()\n","X=vectorizer.fit_transform(x)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OJNWkNrhmDmx"},"source":["# разбиваем X и y на тренировочные и тестовые данные\n","#test_size- выделяет для тестового набора 30%\n","# Суть параметра random_state (во всех функциях и методах из SciKit-Learn) в воспроизводимых случайных значениях. \n","# Т.е. если явно задать значение random_state отличным от None - то генерируемые псевдослучайные величины будут иметь одни и те же значения при каждом вызове.\n","X_train, X_holdout, y_train, y_holdout = train_test_split(X, y, test_size=0.3,random_state=17)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UBohx9tW2bbB","executionInfo":{"status":"ok","timestamp":1624369900649,"user_tz":-300,"elapsed":379,"user":{"displayName":"Аркадий Савельев","photoUrl":"","userId":"12396941015883211172"}},"outputId":"36cba84b-90be-432b-f499-f76040912d2e"},"source":["# проверяем точность рандомного дерева\n","# max_depth-максимальная шлубина дерева\n","# predict-передает на предсказание тестовый X_holdout\n","regr_tree = DecisionTreeRegressor(max_depth=5,random_state=17).fit(X_train,y_train)\n","pred = regr_tree.predict(X_holdout)\n","mean_absolute_error(y_holdout, pred)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.1955598353909471"]},"metadata":{"tags":[]},"execution_count":105}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MAzMh74s5Zpu","executionInfo":{"status":"ok","timestamp":1624364437261,"user_tz":-300,"elapsed":418,"user":{"displayName":"Аркадий Савельев","photoUrl":"","userId":"12396941015883211172"}},"outputId":"c070a9c4-a43d-4ffa-eb3d-a61abc490eca"},"source":["# среднее значение по рейтингу\n","# mean-среднее значение по рейтингу\n","averege=DATA['rating_ball'].mean()\n","averege_pred = [averege]*len(y_holdout)\n","mean_absolute_error(y_holdout, averege_pred)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.18071696000000093"]},"metadata":{"tags":[]},"execution_count":29}]},{"cell_type":"code","metadata":{"id":"ZT8c94zR_Rnl"},"source":["# попробовать\n","# TfIdf\n","# min_df = 1\n","# RandomForesRegressor \n","# CatBoostRegressor"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U8f_dBgklLo7","executionInfo":{"status":"ok","timestamp":1624369883555,"user_tz":-300,"elapsed":638,"user":{"displayName":"Аркадий Савельев","photoUrl":"","userId":"12396941015883211172"}},"outputId":"d3d3848d-c318-47e1-a7f7-1572d65d1af1"},"source":["from google.colab import drive\n","drive.mount('/content/drive/')\n","dataf=\"/content/drive/My Drive/Test.xlsx\"\n","dataf=pd.read_excel(dataf)\n","new_data=dataf['overview']+' '+dataf['actors']+' '+dataf['screenwriter']"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive/; to attempt to forcibly remount, call drive.mount(\"/content/drive/\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7xnCxoUTs9Ub","executionInfo":{"status":"ok","timestamp":1624369893382,"user_tz":-300,"elapsed":424,"user":{"displayName":"Аркадий Савельев","photoUrl":"","userId":"12396941015883211172"}},"outputId":"10c99309-f3f6-4ff7-f0ad-ef94d6291319"},"source":["#использование других данных для теста (самый лучший день)\n","# array([8.19314198]),в то время как реальный балл фильма 4.6\n","tok_dataf = new_data.apply(lambda x: tt(x, word_tokenize))\n","tok_dataf = new_data.apply(word_tokenize)\n","lem_dataf= tok_dataf.apply(lambda x: lemmatize(x, lem))\n","x1=lem_dataf.apply(f_p)\n","X1=vectorizer.transform(x1)\n","regr_tree.predict(X1)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([8.19314198])"]},"metadata":{"tags":[]},"execution_count":104}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":352},"id":"vzMej7nZX_p0","executionInfo":{"status":"ok","timestamp":1624093977514,"user_tz":-300,"elapsed":3536,"user":{"displayName":"Аркадий Савельев","photoUrl":"","userId":"12396941015883211172"}},"outputId":"66e3c17b-bc23-469a-ca1e-96a72a434951"},"source":["#часто встречающиеся слова\n","import itertools\n","import operator\n","from nltk.corpus import stopwords\n","delete = stopwords.words('russian')\n","delete += ['её','которых','той','тот','либо','который','что','он','-',':','»','«','—','_','~','это','эта','кто','в','эти','их','так','к','как','себе','они','но','ним','оно','так','есть','лишь',',','.',';','и','под','с','до']\n","morpheus = pymorphy2.MorphAnalyzer()\n","data_frame = pd.read_csv(FILE_PATH)\n","data_frame = data_frame[['movie', 'year', 'country', 'rating_ball', 'overview', 'director', 'screenwriter', 'actors']]\n","data_frame.head(3)\n","def sum_dicts(d1,d2):\n","    k=set(list(d1.keys())+list(d2.keys()))\n","    d={}\n","    for a in k:\n","        v1=d1.get(a)\n","        v2=d2.get(a)\n","        if v1==None:\n","            v=v2\n","        elif v2==None:\n","            v=v1\n","        else:\n","            v=v1+v2\n","        d[a]=v\n","    return d\n","overviews = data_frame['overview']\n","data_frame[\"settings\"] = \"\"\n","string = 0\n","global_counter = {}\n","for sample in overviews:\n","  counter = {}\n","  for word in word_tokenize(sample, language = \"russian\"):\n","    word = word.lower()\n","    if word[-1] == \"…\":\n","      word = word[:-1]\n","    if word not in delete:\n","      word = morpheus.parse(word)[0].normalized.word\n","      if word in counter:\n","        counter[word] += 1\n","      else:\n","        counter[word] = 1\n","  data_frame[\"settings\"][string] = counter\n","  string += 1\n","  global_counter = sum_dicts(global_counter, counter)\n","global_counter_sorted = dict(sorted(  global_counter.items(),\n","                            key=operator.itemgetter(1),\n","                            reverse=True))\n","first_n = dict(itertools.islice(global_counter_sorted.items(), 10))\n","width=12\n","height=12\n","plt.bar(*zip(*first_n.items()))\n","#plt.subplots(figsize=(width, height)) # задать высоту и ширину графика"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:41: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["<BarContainer object of 10 artists>"]},"metadata":{"tags":[]},"execution_count":87},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}
